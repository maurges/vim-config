#!/bin/bash
# The following is a message from SuSE example bashrc
# Copyright (c) SuSE GmbH Nuernberg

# There are 3 different types of shells in bash: the login shell, normal shell
# and interactive shell. Login shells read ~/.profile and interactive shells
# read ~/.bashrc; in our setup, /etc/profile sources ~/.bashrc - thus all
# settings made here will also take effect in a login shell.
#
# NOTE: It is recommended to make language settings in ~/.profile rather than
# here, since multilingual X sessions would not work properly if LANG is over-
# ridden in every subshell.


# Some applications read the EDITOR variable to determine your favourite text
# editor. So uncomment the line below and enter the editor of your choice :-)
export EDITOR="/usr/bin/env nvim"
alias vim=nvim

# Stack and many others install binaries here
export PATH=$HOME/.local/bin:$PATH

# Enables **/* wildcard
shopt -s globstar

# colored prompt with color depending on the machine i'm using

ps1_nix_prefix=''
ps1_nix_suffix=''
if [[ -n "$IN_NIX_SHELL" ]]; then
	ps1_nix_prefix='['
	ps1_nix_suffix=']'
fi

ps1_level=''
if [[ $SHLVL -gt 1 ]]; then
	# shellcheck disable=SC2016
	ps1_level='<$SHLVL>'
fi

format_jobs() {
	local jobs_amount
	read -r jobs_amount
	if [[ $jobs_amount -eq 0 ]]; then
		echo ""
	else
		echo "-$jobs_amount"
	fi
}
# shellcheck disable=SC2016
ps1_jobs='$(jobs | wc -l | tr -d "\\n" | format_jobs)'
ps1_user="\u"
ps1_host="\h"

case $(hostname) in
gypsy)
	ps1_dir='\[\e[01;33m\]\w\[\e[m\]'; #yellow
	;;
labs)
	ps1_dir='\[\e[01;34m\]\w\[\e[m\]'; #deep blue
	;;
algo)
	ps1_dir='\[\e[01;35m\]\w\[\e[m\]'; #pink
	;;
blackflame)
	ps1_dir='\[\e[01;36m\]\w\[\e[m\]'; #light blue
	;;
macbook-n.sorokovikov)
	ps1_user="morj"
	ps1_host="mac"
	ps1_dir='\[\e[02;34m\]\w\[\e[m\]'; #normal blue
	;;
*)
	ps1_dir='\[\e[01;31m\]\w\[\e[m\]'; #red
	;;
esac

PROMPT="\[\e[01;32m\]$ps1_nix_prefix$ps1_user$ps1_level@$ps1_host$ps1_jobs$ps1_nix_suffix:$ps1_dir> "
PS1="$PROMPT"

# this doesn't fucking work
export NIX_SHELL_PRESERVE_PROMPT=1
# workaround
function restore_prompt_after_nix_shell() {
	if [ "$PS1" != "$PROMPT" ]; then
		PS1=$PROMPT
	fi
	PROMPT_COMMAND=""
}
PROMPT_COMMAND=restore_prompt_after_nix_shell


# some useful aliases from suse (and more)
alias ls='ls --color=auto'
alias :q=exit
alias gdb='gdb -q'
alias g='grep -i'
alias objdump='objdump --disassembler-options=intel'
alias find='find 2>/dev/null'
alias o='less'

#to easily watch twitch broadcasts
alias livetwitch='livestreamer --http-header Client-ID=jzkbprff40iqj646a697cyrvl0zt2m6'

#faster zypper
alias zypnr='zypper --no-refresh'

#idaPRO lunchers
alias ida='WINEDEBUG=-all wine ~/.wine/drive_c/Program\ Files\ \(x86\)/IDA\ 6.8/idaq.exe'
alias ida64='WINEDEBUG=-all wine ~/.wine/drive_c/Program\ Files\ \(x86\)/IDA\ 6.8/idaq64.exe'

#easier systemctl usage
alias sctl='systemctl'

#open files from console without stderr garbage
alias open='xdg-open 2>/dev/null'

#use clipboard for xclip
alias xclip='xclip -selection c'

#send json data with curl
alias jcurl='curl -H "Content-Type: application/json"'


# Codi - a scripting scratchpad inside vim
# Usage: codi [filetype] [filename]
codi() {
	local syntax="${1:-python}"
	if [ "$syntax" = "--help" ]; then
		echo "Codi - a scripting scratchpad inside vim";
		echo "Usage: codi [filetype] [filename]";
		return 1
	fi
	shift
	/usr/bin/nvim -c "Codi $syntax" "$@"
}



# Quickly open objdump with a file
disas() {
	objdump --disassembler-options=intel -D "${1}" | o
}


# Run a ruby code similarily to awk
arb() {
	if [[ $# -ne 1 ]]; then
		echo "Usage: arb expression";
		return 1
	fi
	local command=$(echo "${1}" | tr -d '\n')
	if [[ $command = "--help" ]]; then
		echo "Arb - quickly run a set of ruby command on each line of input";
		echo "You can use A - array of words in current line";
		echo "            prt - print array with items separated by space";
		return
	fi
	ruby -W0 -e "def prt(*a) puts a.join \" \" end; STDIN.read.strip.each_line do |__line| A = __line.split(' '); ${command} end"
}

exrb() {
	if [[ $# -ne 1 ]]; then
		echo "Usage: exrb expression";
		return 1
	fi
	local command=$(echo "${1}" | tr -d '\n')
	if [[ $command = "--help" ]]; then
		echo "exrb - quickly run a ruby command and print its output";
		return
	fi
	ruby -e "puts( eval( '${command}' ) )"
}
