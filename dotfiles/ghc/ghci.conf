:set -XOverloadedStrings -XTypeApplications -XLambdaCase -XNoMonomorphismRestriction

import Prelude (String, Int, IO)

:{
ghci_prompterFunction :: [Prelude.String] -> Prelude.Int -> Prelude.IO Prelude.String
ghci_prompterFunction modules _linenr = Prelude.pure Prelude.$
    let
      joinModules = Data.List.intercalate " "
      modulesString = case Data.List.splitAt 5 (Prelude.reverse modules) of
            (modules', []) -> joinModules modules'
            (modules', _)  -> joinModules modules' Prelude.++ " ..."
    in "\ESC[34m\STX" Prelude.++ modulesString Prelude.++ "\nÎ»\ESC[0m\STX "
:}
:set prompt-function ghci_prompterFunction
:set prompt-cont "\ESC[34m\STX|\ESC[0m\STX "

:set -Wno-type-defaults
:set -Wno-name-shadowing
